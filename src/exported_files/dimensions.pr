import 'package:flutter/widgets.dart';

{[ const dsPrefix = dsPrefix(ds.currentDesignSystemVersion()) /]}
class {{ dsPrefix }}Dimensions {
  final String name;
  final num value;
{[ const measureTokensTree = ds.tokenGroupTreeByType("Measure") /]}
{[ traverse measureTokensTree property subgroups into measureTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(measureTokenGroup) /]}
  {[ const measureTokenInGroups = ds.tokensByGroupId(measureTokenGroup.id) /]}
  {[ for measureToken in measureTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, measureToken.name) /]}
  {[ let fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ if isNumeric(fullTokenName)]}
    {[ fullTokenName = fullTokenName.prefixed("S") /]}
  {[/]}
  {[ if (measureToken.description && measureToken.description !== "") ]}
{{ createDocumentationComment(measureToken.description, "  ") }}
  {[/]}
  static const {{ fullTokenName }} = {[ inject "export_measure_value" context measureToken.value /]};
  static const {{ fullTokenName }}_d = {{ formatAsDouble(measureToken.value.measure) }};
  {[/]}
  const {{ dsPrefix }}Dimensions._(this.name, this.value);
  static const values = <{{dsPrefix}}Dimensions>[
  {[ for measureToken in measureTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, measureToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
    {{ dsPrefix }}Dimensions._("{{ fullTokenName }}", {[ inject "export_measure_value" context measureToken.value /]}),
{[/]}  ];
}

{[ for measureToken in measureTokenInGroups ]}
{[ const fullTokenPath = arrayConcat(fullTokenGroupPath, measureToken.name) /]}
{[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false).uppercased() /]}
const SH_{{ fullTokenName }} = SizedBox(width: {[ inject "export_measure_value" context measureToken.value /]});
const SV_{{ fullTokenName }} = SizedBox(height: {[ inject "export_measure_value" context measureToken.value /]});
const PH_{{ fullTokenName }} = EdgeInsets.symmetric(horizontal: {[ inject "export_measure_value" context measureToken.value /]});
const PV_{{ fullTokenName }} = EdgeInsets.symmetric(vertical: {[ inject "export_measure_value" context measureToken.value /]});
const P_{{ fullTokenName }} = EdgeInsets.all({[ inject "export_measure_value" context measureToken.value /]});
{[/]} 

{[/]}
